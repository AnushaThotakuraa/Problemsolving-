VS CODE:
       <script>
     /*   let myPromise=new promise((resolve,reject)=>{
            let success=true
            if(success){
            resolve("the operation sucessfull")
            }else{
            reject("Operation failed")
            }
            });
            myPromise
            .then(result=>{
                console.log(result)
            })
            .catch(error =>{
                console.log(error)
            }) */

          /*  let promise = new promise((resolve,reject)=>{
                resolve(5);
                })
                PROMISE
                .then(result=>{
                console.log(result)
                return result*2
                })
                .then(result=>{
                console.log(result)
                return+3
                })
                .then(result=>{
                console.log(result)
                console.log(result)
                
                })
                .catch(error=>{
                console.log("erorr",error)
                };) */

                let fetchData= new Promise((resolve,reject)=>{
                    let dataFetched =false
                    setTimeout(()=>{
                    if(dataFetched){
                    resolve("Data fetched sucessfully")}
                    else{
                    reject("Data fetching failed")
                    }
                    },2000)
                    })
                    fetchData
                    .then(result=>{
                    consoel.log(result)})
                    .catch(error=>{
                    console.log(error)
                    })


    </script>


    nOTES:
    Promise : a promise is a special javascript object that represens the eventual completion(or failure) of an asynchronous
operation
THree states:
1.pending-the initial state,the promise is still waiting for operation of finsh
2.fulfilled-the operation completed sucessfully
3.rejected-the opeation failed
the promise constructor takes function with 2 parameters:
1.resolve-to mark as the promise is sucessfull
2.reject:to mark it as failed

Handling:
then() method is called when the promise is fulled.it recives the result from the resolve()
catch() method is called when promise is rejected
ExAMPLE:

let myPromise=new promise((resolve,reject)=>{
let success=true
if(success){
resolve("the operation sucessfull")
}else{
reject("Operation failed")
}
});
myPromise
.then(result=>{
console.log(result)
})
.catch(error =>{
console.log(error)
})

Chaining Promises:
you can have chain multiple .then() METHODS
example:
let promise = new promise((resolve,reject)=>{
resolve(5);
})
PROMISE
.then(result=>{
console.log(result)
return result*2
})
.then(result=>{
console.log(result)
return+3
})
.then(result=>{
console.log(result)
console.log(result)

})
.catch(error=>{
console.log("erorr",error)
};)


Promise with serTimeout:
usinf setTimeour the promise will resolve after certain amount of time;

example:
let fetchData= new Promise((resolve,reject)+>{
let dataFetched =false
setTimeout(()=>{
if(dataFetched){
resolve("Data fetched sucessfully")}
else{
reject("Data fetching failed")
}
},2000)
})
fetchData
.then(result+>{
conso;e.log(result)})
.catch(error=>{
console.log(error)
}
